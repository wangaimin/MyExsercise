
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Js构造函数的继承</title>
</head>
<body>
    <div>
    </div>
</body>
</html>
<script>
  //推荐使用方式四



    //方式一 call（缺点浪费资源，每次new对象，字段，占用内存）

    //function Animal() {

    //    this.species = "动物";
    //}
    //function Cat(name,color) {
    //    Animal.call(this, arguments);
    //    this.name = name;
    //    this.color = color;
    //}
    //var cat = new Cat();
    //console.log(cat.species);




    //方式二 prototype（缺点：yzw使用的这种方式 ）
   // function Animal() {

   //     this.species = "动物";
   // }
   // function Cat(name, color) {
   //     this.name = name;
   //     this.color = color;
   // }

   // Cat.prototype = new Animal();
   ////任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有"Cat.prototype = new Animal();"这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。
   ////这显然会导致继承链的紊乱（cat1明明是用构造函数Cat生成的），因此我们必须手动纠正，将Cat.prototype对象的constructor值改为Cat。
   // Cat.constructor = Cat;
   
   // var cat = new Cat();
   // console.log(cat.species);


    //方法三   prototype 最好不用这种方式
    //（优点：比方法三效率高；
    //缺点：缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。
    //Cat.prototype.constructor = Cat;
    //这一句实际上把Animal.prototype对象的constructor属性也改掉了！alert(Animal.prototype.constructor); // Cat）

    //function Animal() {
    //    this.myName = "Animal";//这个属性通过此继承方式无法访问
    //}

    //Animal.prototype.species = "动物";

    //function Cat(name, color) {
    //    this.name = name;
    //    this.color = color;
    //}

    //Cat.prototype = Animal.prototype;
    //Cat.prototype.constructor = Cat;

    //var cat = new Cat();
    //console.log(cat.species);


    //方式四 利用空对象作为中介。这个extend函数，就是YUI库如何实现继承的方法。
    
    function Animal() {
        this.myName = "Animal";//这个属性通过此继承方式无法访问
    }

    Animal.prototype.species = "动物";

    Animal.prototype.consoleName = function (name) {
        console.log(name);
    }

    function extend(child, parent) {
        var f = function () { };//f为空对象，几乎不占内存。修改child的prototype对象，就不会影响到Animal的prototype对象。
        f.prototype = parent.prototype;
        child.prototype = new f();
        child.prototype.constructor = child;
        child.uber = parent.prototype;//意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。（uber是一个德语词，意思是"向上"、"上一层"。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。
    }

    function Cat(name, color) {
        this.name = name;
        this.color = color;
    }
    Cat.prototype.species = "动物毛";

    extend(Cat, Animal);
    var cat = new Cat();
    console.log(cat.species);//输出值为动物， Cat.prototype.species的值被Animal覆盖

    debugger;

    //方式五 拷贝继承
    //function Animal() {
    //    this.myName = "Animal";//这个属性通过此继承方式无法访问
    //}

    //Animal.prototype.species = "动物";
    //Animal.prototype.names = [1, 2, 3];
    //Animal.prototype.consoleName = function (name) {
    //    console.log(name);
    //}

    //function extend(child, parent) {
    //    var c = child.prototype;
    //    var p = parent.prototype;

    //    for (var i in p) {
    //        c[i] = p[i];
    //    }
    //    c.uber = p;
    //}

    //function Cat(name, color) {
    //    this.name = name;
    //    this.color = color;
    //}

    //Cat.prototype.species = "动物毛";

    //extend(Cat, Animal);
    //var cat = new Cat();
    //console.log(cat.species);
    //debugger;
</script>